<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ESP32使用VLGL(arduino)</title>
      <link href="/2021/07/25/ESP32%E4%BD%BF%E7%94%A8VLGL(arduino)/"/>
      <url>/2021/07/25/ESP32%E4%BD%BF%E7%94%A8VLGL(arduino)/</url>
      
        <content type="html"><![CDATA[<p>LVGL 为免费开源的图形库，用于在嵌入式设备的屏幕上创建 GUI，也适用于触摸屏</p><span id="more"></span><p>元件：</p><ul><li>ESP32</li><li>TFT 屏幕<br>软件：</li><li>Arduino<br>准备工作：</li><li>库<ul><li><a href="https://github.com/Bodmer/TFT_eSPI">TFT_eSPI</a></li><li><a href="https://github.com/Bodmer/TFT_Touch">TFT_Touch</a>(如果有触摸需求的话)</li><li><a href="https://github.com/lvgl/lv_arduino">lv_arduino</a></li></ul></li><li>将库引入 Arduino 的 Library 文化夹中去<br>更改配置文件：<blockquote><p>由于默认使用了 User_setup.h 配置文件所以需要根据自己的硬件环境进行更改方法为：<br>在 User_Setup_select.h 文件中将 User_setup.h 头文件注释掉再根据自己的开发版和屏幕型号选择对应的头文件取消注释，然后道相应的头文件里面配置引脚和屏幕大小即可。<br>可以使用库中的 examples 测试。<br>参考：<a href="https://blog.csdn.net/qq_41868901/article/details/107998469">https://blog.csdn.net/qq_41868901/article/details/107998469</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬件开发 </tag>
            
            <tag> Arduino </tag>
            
            <tag> ESP32 </tag>
            
            <tag> VLGL图形库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pat-Ranking</title>
      <link href="/2021/07/18/Ranking/"/>
      <url>/2021/07/18/Ranking/</url>
      
        <content type="html"><![CDATA[<p>排名问题（同分数排名处理）</p><span id="more"></span><h2 id="问题重述"><a href="#问题重述" class="headerlink" title="问题重述"></a>问题重述</h2><details>  <summary>问题描述</summary><p>  Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</p><p>  <code>Input Specification:</code><br>  Each input file contains one test case. For each case, the first line contains a positive number N (≤100), the number of test locations. Then N ranklists follow, each starts with a line containing a positive integer K (≤300), the number of testees, and then K lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</p><p>  <code>Output Specification:</code><br>  For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:</p><p>  <code>registration_number</code> <code>final_rank</code> <code>location_number</code> <code>local_rank</code><br>  The locations are numbered from 1 to N. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</p><p>  <code>Sample Input:</code><br>  2<br>  5<br>  1234567890001 95<br>  1234567890005 100<br>  1234567890003 95<br>  1234567890002 77<br>  1234567890004 85<br>  4<br>  1234567890013 65<br>  1234567890011 25<br>  1234567890014 100<br>  1234567890012 85</p><p>  <code>Sample Output:</code><br>  9<br>  1234567890005 1 1 1<br>  1234567890014 1 2 1<br>  1234567890001 3 1 2<br>  1234567890003 3 1 2<br>  1234567890004 5 1 4<br>  1234567890012 5 2 2<br>  1234567890002 7 1 5<br>  1234567890013 8 2 3<br>  1234567890011 9 2 4</p></details><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>成绩排名问题，难点有两方面：</p><ol><li>同分排名问题</li><li>地区排名问题</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>排序之后，设置一个变量用于记录已统计的个数，如果当前人的分数和上一个相同排名就和前一个相同，否则按照排名来。<br>地区排名可以理解为分部分排名，可以用数组记录每个地区已经排了多少人了，进而确定当前的排名，但也要注意同分问题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    string id<span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> r1<span class="token punctuation">;</span>    <span class="token keyword">int</span> r2<span class="token punctuation">;</span>    <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        r1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        r2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>s <span class="token operator">!=</span> b<span class="token punctuation">.</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>s <span class="token operator">></span> b<span class="token punctuation">.</span>s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>node<span class="token operator">></span> v<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        num<span class="token operator">+=</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            node temp<span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp<span class="token punctuation">.</span>id <span class="token operator">>></span> temp<span class="token punctuation">.</span>s<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>l <span class="token operator">=</span> i<span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rank <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lr<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lp<span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        lr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        lp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> np<span class="token punctuation">;</span>        np <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">==</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            r1 <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r1<span class="token punctuation">;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r1 <span class="token operator">=</span> r1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r1 <span class="token operator">=</span> rank<span class="token punctuation">;</span>            r1 <span class="token operator">=</span> rank<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        rank<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lp<span class="token punctuation">[</span>np<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>lp<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">==</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            r2 <span class="token operator">=</span> v<span class="token punctuation">[</span>lp<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r2<span class="token punctuation">;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r2 <span class="token operator">=</span> r2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            r2 <span class="token operator">=</span> lr<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r2 <span class="token operator">=</span> r2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        lr<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        lp<span class="token punctuation">[</span>np<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> r1 <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> r2<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> PAT甲级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>demo</title>
      <link href="/2021/07/18/demo/"/>
      <url>/2021/07/18/demo/</url>
      
        <content type="html"><![CDATA[<p>测试一下咯</p><span id="more"></span><h3 id="你好呀"><a href="#你好呀" class="headerlink" title="你好呀"></a>你好呀</h3><h4 id="helloworld1"><a href="#helloworld1" class="headerlink" title="helloworld1"></a>helloworld1</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;int main()&#123;    cout&lt;&lt;&quot;hello world&quot;;&#125;</code></pre><details>  <summary>Summary</summary> <div class="warning"><blockquote><p>Warning</p></blockquote></div></details>> Primary<div class="success"><blockquote><p>Success</p></blockquote></div><div class="warning"><blockquote><p>Warning</p></blockquote></div><div class="danger"><blockquote><p>Danger</p></blockquote></div><div class="info"><blockquote><p>Info</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
